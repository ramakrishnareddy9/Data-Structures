Algorithm FindLargestIncreasingSequence(pairs):
    Sort pairs by CSE1022 score in ascending order
    n = length of pairs
    Initialize dp[0..n-1] = 1
    Initialize parent[0..n-1] = -1  // To reconstruct the sequence

    for i from 1 to n-1:
        for j from 0 to i-1:
            if pairs[j].CSE1019 < pairs[i].CSE1019 and dp[j] + 1 > dp[i]:
                dp[i] = dp[j] + 1
                parent[i] = j

    max_length = max value in dp
    index = index of max_length in dp

    // Reconstruct sequence
    sequence = empty list
    while index != -1:
        add pairs[index] to sequence
        index = parent[index]
    reverse(sequence)

    return sequence, max_length

b===========================================================================
Algorithm FindLargestSequenceUsingLCS(pairs):
    Sort pairs by CSE1022 score in ascending order
    A = sequence of CSE1019 scores from pairs
    B = sorted version of A

    sequence = LCS(A, B)
    length = length of sequence

    return sequence, length

Algorithm LCS(A, B):
    m = length(A)
    n = length(B)
    Create 2D array dp[0..m][0..n]

    for i from 0 to m:
        dp[i][0] = 0
    for j from 0 to n:
        dp[0][j] = 0

    for i from 1 to m:
        for j from 1 to n:
            if A[i-1] == B[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])

    // Reconstruct LCS
    i = m, j = n
    lcs_sequence = empty list
    while i > 0 and j > 0:
        if A[i-1] == B[j-1]:
            add A[i-1] to lcs_sequence
            i = i - 1
            j = j - 1
        else if dp[i-1][j] > dp[i][j-1]:
            i = i - 1
        else:
            j = j - 1
    reverse(lcs_sequence)

    return lcs_sequence
